// Generated by SimpleMVI KSP TCAFeatureProcessor
// Do not edit manually

import ComposableArchitecture
import Shared
import Foundation


// MARK: - SideEffect Handler Protocol
protocol TimerStoreSideEffectHandler {
    func handle(_ effect: TimerStoreSideEffect) -> Effect<TimerFeature.Action>
}


// MARK: - Default Handler Implementation
struct DefaultTimerStoreSideEffectHandler: TimerStoreSideEffectHandler {
    func handle(_ effect: TimerStoreSideEffect) -> Effect<TimerFeature.Action>{
        switch effect {
        default:
            return .none
        }
    }
}


// MARK: - TCA Dependency Registration
extension DependencyValues {
    var timerStore: TimerStore {
        get { self[TimerStoreKey.self] }
        set { self[TimerStoreKey.self] = newValue }
    }
}

private struct TimerStoreKey: DependencyKey {
    static let liveValue: TimerStore = {
        fatalError("TimerStore dependency not configured. Provide it via withDependencies.")
    }()
}

extension DependencyValues {
    var timerStoreSideEffectHandler: any TimerStoreSideEffectHandler {
        get { self[TimerStoreSideEffectHandlerKey.self] }
        set { self[TimerStoreSideEffectHandlerKey.self] = newValue }
    }
}
private struct TimerStoreSideEffectHandlerKey: DependencyKey {
    static let liveValue: any TimerStoreSideEffectHandler = DefaultTimerStoreSideEffectHandler()
}


// MARK: - TCA Feature
@Reducer
struct TimerFeature {
    
    @ObservableState
    struct State: Equatable {
        var isTimerRunning: Bool
        var value: Int
        var _bridge = TimerStoreBridgeReducer.State()
        var _lifecycle: _TimerStoreLifecycle?
    }

    @CasePathable
    enum Action {
        case resetTimer
        case startTimer
        case stopTimer

        case _bridge(TimerStoreBridgeReducer.Action)
        case _setLifecycle(_TimerStoreLifecycle?)
    }

    @Dependency(\.timerStore) var store
    @Dependency(\.timerStoreSideEffectHandler) var sideEffectHandler

    var body: some ReducerOf<Self> {
        Scope(state: \._bridge, action: \._bridge) {
            TimerStoreBridgeReducer()
        }
        
        Reduce { state, action in
            switch action {
            case .resetTimer:
                store.accept(intent: TimerStoreIntentResetTimer())
                return .none
                
            case .startTimer:
                store.accept(intent: TimerStoreIntentStartTimer())
                return .none
                
            case .stopTimer:
                store.accept(intent: TimerStoreIntentStopTimer())
                return .none
                
            case let ._bridge(.stateUpdated(domain)):
              state.apply(from: domain)
              return .none

            case let ._bridge(.sideEffect(sideEffect)):
              return sideEffectHandler.handle(sideEffect.wrapped)

            case ._bridge(.startObserving), ._bridge(.stopObserving):
              return .none
            case let ._setLifecycle(lifecycle):
                state._lifecycle = lifecycle
                return .none
                
            }
        }
    }
}


// MARK: - StoreState â†’ Feature.State Mapper
extension TimerFeature.State {
    mutating func apply(from domain: TimerStore.State) {
        self.isTimerRunning = domain.isTimerRunning
        self.value = Int(domain.value)
    }
}

@Reducer
struct TimerStoreBridgeReducer {
    
    struct State : Equatable {}
    
    @CasePathable
    enum Action : Equatable {
        case startObserving
        case stopObserving
        case stateUpdated(TimerStore.State)
        case sideEffect(StoreSideEffectWrapper<TimerStoreSideEffect>)
    }
    
    @Dependency(\.timerStore) var store
    
    var body: some Reducer<State, Action> {
        Reduce { state, action in
            switch action {
            case .startObserving:
                return observe()

            case .stopObserving:
              return .merge(
                .cancel(id: CancelID.state),
                .cancel(id: CancelID.sideEffects)
              )

            default:
              return .none
            }
        }
    }
}


// MARK: - Observable Bridge
extension TimerStoreBridgeReducer {
    
    private enum CancelID { case state, sideEffects }
    
    func observe() -> Effect<Action> {
        .merge(
            observeState(),
            observeSideEffects()
        )
    }
    
    private func observeState() -> Effect<Action> {
        .run { send in
            for try await state in asAsyncThrowingStream(CStateFlow<TimerStore.State>(source: store.states)) {
                await send(.stateUpdated(state))
            }
        }
        .cancellable(id: CancelID.state, cancelInFlight: false)
    }
    
    private func observeSideEffects() -> Effect<Action> {
        .run { send in
            for try await sideEffect in asAsyncThrowingStream(CFlow<TimerStoreSideEffect>(source: store.sideEffects)) {
                await send(.sideEffect(StoreSideEffectWrapper(wrapped: sideEffect)))
            }
        }
        .cancellable(id: CancelID.sideEffects, cancelInFlight: false)
    }
}


// MARK: - Factory
extension TimerFeature {
    
    static func from(
        store: TimerStore,
        withDependencies configureDependencies: @escaping (inout DependencyValues) -> Void = { _ in }
    ) -> StoreOf<Self> {
        let tcaStore = Store(
            initialState: State(
                isTimerRunning: store.state.isTimerRunning,
                value: Int(store.state.value),
                _bridge: TimerStoreBridgeReducer.State(),
                _lifecycle: nil
            )
        ) {
            TimerFeature()
        } withDependencies: { deps in
            deps.timerStore = store
            configureDependencies(&deps)
        }

        let lifecycle = _TimerStoreLifecycle(store: store) { action in
            await tcaStore.send(action)
        }
        Task { await tcaStore.send(._setLifecycle(lifecycle)) }

        return tcaStore
    }
}

// MARK: - Equatable
extension TimerFeature.State {
    static func == (lhs: Self, rhs: Self) -> Bool {
        guard lhs.isTimerRunning == rhs.isTimerRunning else { return false }
        guard lhs.value == rhs.value else { return false }
        return lhs._bridge == rhs._bridge
    }
}

// MARK: - Lifecycle Token
final class _TimerStoreLifecycle {
    private let store: TimerStore
    private var observerTask: Task<Void, Never>?

    init(store: TimerStore, send: @escaping (TimerFeature.Action) async -> Void) {
        self.store = store
        store.doInit()

        observerTask = Task {
            await withTaskGroup(of: Void.self) { group in
                group.addTask {
                    do {
                        for try await state in asAsyncThrowingStream(CStateFlow<TimerStore.State>(source: store.states)) {
                            await send(._bridge(.stateUpdated(state)))
                        }
                    } catch {}
                }

                group.addTask {
                    do {
                        for try await effect in asAsyncThrowingStream(CFlow<TimerStoreSideEffect>(source: store.sideEffects)) {
                            await send(._bridge(.sideEffect(StoreSideEffectWrapper(wrapped: effect))))
                        }
                    } catch {}
                }
            }
        }
    }

    deinit {
        observerTask?.cancel()
        store.destroy()
    }
}

