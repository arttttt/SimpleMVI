// Generated by SimpleMVI KSP TCAFeatureProcessor
// Do not edit manually

import ComposableArchitecture
import Shared
import Foundation


// MARK: - TCA Dependency Registration
extension DependencyValues {
    var counterStore: CounterStore {
        get { self[CounterStoreKey.self] }
        set { self[CounterStoreKey.self] = newValue }
    }
}

private struct CounterStoreKey: DependencyKey {
    static let liveValue: CounterStore = {
        fatalError("CounterStore dependency not configured. Provide it via withDependencies.")
    }()
}

// MARK: - TCA Feature
@Reducer
struct CounterStoreFeature {
    
    @ObservableState
    struct State: Equatable {
        var counter: Int
    }

    @CasePathable
    enum Action {
        case decrement
        case increment
        case reset

        case _stateUpdated(CounterStore.State)
        case _sideEffect(CounterStoreSideEffect)
    }

    @Dependency(\.counterStore) var store

    var body: some ReducerOf<Self> {
        Reduce { state, action in
            switch action {
            case .decrement:
                store.accept(intent: CounterStoreIntentDecrement())
                return .none
                
            case .increment:
                store.accept(intent: CounterStoreIntentIncrement())
                return .none
                
            case .reset:
                store.accept(intent: CounterStoreIntentReset())
                return .none
                
            case let ._stateUpdated(domain):
                state.apply(from: domain)
                return .none

            case ._sideEffect:
                return .none
            }
        }
    }
}


// MARK: - StoreState â†’ Feature.State Mapper
extension CounterStoreFeature.State {
    mutating func apply(from domain: CounterStore.State) {
        self.counter = Int(domain.counter)
    }
}

// MARK: - State Factory
extension CounterStoreFeature.State {
    
    static func from(state: CounterStore.State) -> Self {
        return State(
            counter: Int(state.counter),
        )
    }
}

// MARK: - Lifecycle Binding
extension CounterStore {
    
    func bindLifecycle(
        send: @escaping (CounterStoreFeature.Action) async -> Void,
    ) {
        let lifecycle = _CounterStoreLifecycle(store: self)
        lifecycle.start(send: send)
    }
}

// MARK: - Factory
extension CounterStoreFeature {
    
    static func from(
        store: CounterStore,
        withDependencies configureDependencies: @escaping (inout DependencyValues) -> Void = { _ in },
    ) -> StoreOf<Self> {
        let tcaStore = Store(
            initialState: State.from(state: store.state)
        ) {
            CounterStoreFeature()
        } withDependencies: { deps in
            deps.counterStore = store
            configureDependencies(&deps)
        }

        store.bindLifecycle { action in
            await tcaStore.send(action)
        }

        return tcaStore
    }
}

// MARK: - Equatable
extension CounterStoreFeature.State {
    static func == (lhs: Self, rhs: Self) -> Bool {
        return lhs.counter == rhs.counter
    }
}

// MARK: - Lifecycle Token
final class _CounterStoreLifecycle {
    private let store: CounterStore
    private var observerTask: Task<Void, Never>?

    init(store: CounterStore) {
        self.store = store
        store.doInit()
    }

    func start(send: @escaping (CounterStoreFeature.Action) async -> Void) {
        observerTask = Task {
            await withTaskGroup(of: Void.self) { group in
                group.addTask {
                    do {
                        for try await state in asAsyncThrowingStream(CStateFlow<CounterStore.State>(source: self.store.states)) {
                            await send(._stateUpdated(state))
                        }
                    } catch {}
                }

                group.addTask {
                    do {
                        for try await effect in asAsyncThrowingStream(CFlow<CounterStoreSideEffect>(source: self.store.sideEffects)) {
                            await send(._sideEffect(effect))
                        }
                    } catch {}
                }
            }
        }
    }

    deinit {
        observerTask?.cancel()
        store.destroy()
    }
}

